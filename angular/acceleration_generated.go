// This code is generated by units-codegen; do not manualy edit this file.

package angular

import (
	"time"
)

// Units for Acceleration values. Always multiply with a unit when setting the initial value like you would for
// time.Time. This prevents you from having to worry about the internal storage format.
const (
	MilliradianPerSecondSquared Acceleration = Acceleration(MilliradianPerSecond) / Acceleration(time.Second)
	RadianPerSecondSquared      Acceleration = Acceleration(RadianPerSecond) / Acceleration(time.Second)
	DegreePerSecondSquared      Acceleration = Acceleration(DegreePerSecond) / Acceleration(time.Second)
	GradianPerSecondSquared     Acceleration = Acceleration(GradianPerSecond) / Acceleration(time.Second)
)

// MilliradiansPerSecondSquared returns a as a floating point number of milliradianspersecondsquared.
func (a Acceleration) MilliradiansPerSecondSquared() float64 {
	return float64(a / MilliradianPerSecondSquared)
}

// RadiansPerSecondSquared returns a as a floating point number of radianspersecondsquared.
func (a Acceleration) RadiansPerSecondSquared() float64 {
	return float64(a / RadianPerSecondSquared)
}

// DegreeesPerSecondSquared returns a as a floating point number of degreeespersecondsquared.
func (a Acceleration) DegreeesPerSecondSquared() float64 {
	return float64(a / DegreePerSecondSquared)
}

// GradiansPerSecondSquared returns a as a floating point number of gradianspersecondsquared.
func (a Acceleration) GradiansPerSecondSquared() float64 {
	return float64(a / GradianPerSecondSquared)
}

// Abs returns the absolute value of a as a copy.
func (a Acceleration) Abs() Acceleration {
	if a < 0 {
		return -a
	}
	return a
}

// Mul returns the product of a * x as a new Acceleration.
func (a Acceleration) Mul(x float64) Acceleration {
	return a * Acceleration(x)
}

// Div returns the quotient of a / x as a new Acceleration.
func (a Acceleration) Div(x float64) Acceleration {
	return a / Acceleration(x)
}

// DivAcceleration returns the quotient of a / x as a floating point number.
func (a Acceleration) DivAcceleration(x Acceleration) float64 {
	return float64(a / x)
}

// MulDuration returns the product of a * t as a Velocity.
func (a Acceleration) MulDuration(t time.Duration) Velocity {
	return Velocity(float64(a) * float64(t))
}
