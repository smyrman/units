// This code is generated by units-codegen; do not manualy edit this file.
{{$self := .Self}}{{$name := .Name}}
package {{.PkgName}}

{{if .Import}}import ({{range .Import}}
	"{{.}}"{{end}}
){{end}}

// Units for {{.Name}} values. Always multiply with a unit when setting the initial value like you would for
// time.Time. This prevents you from having to worry about the internal storage format.
const ({{range .Units}}
	{{.Name}} {{$name}} = {{.Value}}{{end}}
)
{{range .Units}}
// {{.NamePlural}} returns {{$self}} as a floating point number of {{.NamePlural|lower}}.
func ({{$self}} {{$name}}) {{.NamePlural}}() float64 {
	return float64({{$self}} / {{.Name}})
}
{{end}}
// Abs returns the absolute value of {{.Self}} as a copy.
func ({{.Self}} {{.Name}}) Abs() {{.Name}} {
	if {{.Self}} < 0 {
		return -{{.Self}}
	}
	return {{.Self}}
}

// Mul returns the product of {{.Self}} * x as a new {{.Name}}.
func ({{.Self}} {{.Name}}) Mul(x float64) {{.Name}} {
	return {{.Self}} * {{.Name}}(x)
}

// Div returns the quotient of {{.Self}} / x as a new {{.Name}}.
func ({{.Self}} {{.Name}}) Div(x float64) {{.Name}} {
	return {{.Self}} / {{.Name}}(x)
}

// Div{{.Name}} returns the quotient of {{.Self}} / x as a floating point number.
func ({{.Self}} {{.Name}}) Div{{.Name}}(x {{.Name}}) float64 {
	return float64({{.Self}} / x)
}
{{if .DivDurationType}}
// DivDuration returns the quotient of {{.Self}} / t as a {{.DivDurationType}}.
func ({{.Self}} {{.Name}}) DivDuration(t time.Duration) {{.DivDurationType}} {
	return {{.DivDurationType}}(float64({{.Self}}) / float64(t))
}

// Div{{.DivDurationType}} returns the quotient of {{.Self}} / x as a time.Duration.
func ({{.Self}} {{.Name}}) Div{{.DivDurationType}}(x {{.DivDurationType}}) time.Duration {
	return time.Duration(float64({{.Self}}) / float64(x))
}{{end}}
{{if .MulDurationType}}
// MulDuration returns the product of {{.Self}} * t as a {{.MulDurationType}}.
func ({{.Self}} {{.Name}}) MulDuration(t time.Duration) {{.MulDurationType}} {
	return {{.MulDurationType}}(float64({{.Self}}) * float64(t))
}{{end}}
