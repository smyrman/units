// This code is generated by units-codegen; do not manualy edit this file.

package linear

import (
	"time"
)

// Units for Acceleration values. Always multiply with a unit when setting the initial value like you would for
// time.Time. This prevents you from having to worry about the internal storage format.
const (
	NanometerPerSecondSquared  Acceleration = Acceleration(NanometerPerSecond) / Acceleration(time.Second)
	MicrometerPerSecondSquared Acceleration = Acceleration(MicrometerPerSecond) / Acceleration(time.Second)
	MillimeterPerSecondSquared Acceleration = Acceleration(MillimeterPerSecond) / Acceleration(time.Second)
	CentimeterPerSecondSquared Acceleration = Acceleration(CentimeterPerSecond) / Acceleration(time.Second)
	DecimeterPerSecondSquared  Acceleration = Acceleration(DecimeterPerSecond) / Acceleration(time.Second)
	MeterPerSecondSquared      Acceleration = Acceleration(MeterPerSecond) / Acceleration(time.Second)
	KilometerPerSecondSquared  Acceleration = Acceleration(KilometerPerSecond) / Acceleration(time.Second)
	FootPerSecondSquared       Acceleration = Acceleration(FootPerSecond) / Acceleration(time.Second)
)

// NanometersPerSecondSquared returns a as a floating point number of nanometerspersecondsquared.
func (a Acceleration) NanometersPerSecondSquared() float64 {
	return float64(a / NanometerPerSecondSquared)
}

// MicrometersPerSecondSquared returns a as a floating point number of micrometerspersecondsquared.
func (a Acceleration) MicrometersPerSecondSquared() float64 {
	return float64(a / MicrometerPerSecondSquared)
}

// MillimetersPerSecondSquared returns a as a floating point number of millimeterspersecondsquared.
func (a Acceleration) MillimetersPerSecondSquared() float64 {
	return float64(a / MillimeterPerSecondSquared)
}

// CentimetersPerSecondSquared returns a as a floating point number of centimeterspersecondsquared.
func (a Acceleration) CentimetersPerSecondSquared() float64 {
	return float64(a / CentimeterPerSecondSquared)
}

// DecimetersPerSecondSquared returns a as a floating point number of decimeterspersecondsquared.
func (a Acceleration) DecimetersPerSecondSquared() float64 {
	return float64(a / DecimeterPerSecondSquared)
}

// MetersPerSecondSquared returns a as a floating point number of meterspersecondsquared.
func (a Acceleration) MetersPerSecondSquared() float64 {
	return float64(a / MeterPerSecondSquared)
}

// KilometersPerSecondSquared returns a as a floating point number of kilometerspersecondsquared.
func (a Acceleration) KilometersPerSecondSquared() float64 {
	return float64(a / KilometerPerSecondSquared)
}

// FeetPerSecondSquared returns a as a floating point number of feetpersecondsquared.
func (a Acceleration) FeetPerSecondSquared() float64 {
	return float64(a / FootPerSecondSquared)
}

// Abs returns the absolute value of a as a copy.
func (a Acceleration) Abs() Acceleration {
	if a < 0 {
		return -a
	}
	return a
}

// Mul returns the product of a * x as a new Acceleration.
func (a Acceleration) Mul(x float64) Acceleration {
	return a * Acceleration(x)
}

// Div returns the quotient of a / x as a new Acceleration.
func (a Acceleration) Div(x float64) Acceleration {
	return a / Acceleration(x)
}

// DivAcceleration returns the quotient of a / x as a floating point number.
func (a Acceleration) DivAcceleration(x Acceleration) float64 {
	return float64(a / x)
}

// MulDuration returns the product of a * t as a Velocity.
func (a Acceleration) MulDuration(t time.Duration) Velocity {
	return Velocity(float64(a) * float64(t))
}
