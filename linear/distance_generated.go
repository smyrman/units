// This code is generated by units-codegen; do not manualy edit this file.

package linear

import (
	"time"
)

// Units for Distance values. Always multiply with a unit when setting the initial value like you would for
// time.Time. This prevents you from having to worry about the internal storage format.
const (
	Nanometer    Distance = 1e-6
	Micrometer   Distance = 1e-3
	Millimeter   Distance = 1
	Centimeter   Distance = 1e1
	Decimeter    Distance = 1e2
	Meter        Distance = 1e3
	Kilometer    Distance = 1e6
	Thou         Distance = 0.0254 * Millimeter
	Inch         Distance = 25.4 * Millimeter
	Foot         Distance = 304.8 * Millimeter
	Yard         Distance = 3 * Foot
	Chain        Distance = 66 * Foot
	Furlong      Distance = 660 * Foot
	Mile         Distance = 5280 * Foot
	Fathom       Distance = 6.08 * Foot
	Cable        Distance = 608 * Foot
	NauticalMile Distance = 6080 * Foot
)

// Nanometers returns d as a floating point number of nanometers.
func (d Distance) Nanometers() float64 {
	return float64(d / Nanometer)
}

// Micrometers returns d as a floating point number of micrometers.
func (d Distance) Micrometers() float64 {
	return float64(d / Micrometer)
}

// Millimeters returns d as a floating point number of millimeters.
func (d Distance) Millimeters() float64 {
	return float64(d / Millimeter)
}

// Centimeters returns d as a floating point number of centimeters.
func (d Distance) Centimeters() float64 {
	return float64(d / Centimeter)
}

// Decimeters returns d as a floating point number of decimeters.
func (d Distance) Decimeters() float64 {
	return float64(d / Decimeter)
}

// Meters returns d as a floating point number of meters.
func (d Distance) Meters() float64 {
	return float64(d / Meter)
}

// Kilometers returns d as a floating point number of kilometers.
func (d Distance) Kilometers() float64 {
	return float64(d / Kilometer)
}

// Thou returns d as a floating point number of thou.
func (d Distance) Thou() float64 {
	return float64(d / Thou)
}

// Inches returns d as a floating point number of inches.
func (d Distance) Inches() float64 {
	return float64(d / Inch)
}

// Feet returns d as a floating point number of feet.
func (d Distance) Feet() float64 {
	return float64(d / Foot)
}

// Yards returns d as a floating point number of yards.
func (d Distance) Yards() float64 {
	return float64(d / Yard)
}

// Chains returns d as a floating point number of chains.
func (d Distance) Chains() float64 {
	return float64(d / Chain)
}

// Furlongs returns d as a floating point number of furlongs.
func (d Distance) Furlongs() float64 {
	return float64(d / Furlong)
}

// Miles returns d as a floating point number of miles.
func (d Distance) Miles() float64 {
	return float64(d / Mile)
}

// Fathoms returns d as a floating point number of fathoms.
func (d Distance) Fathoms() float64 {
	return float64(d / Fathom)
}

// Cables returns d as a floating point number of cables.
func (d Distance) Cables() float64 {
	return float64(d / Cable)
}

// NauticalMiles returns d as a floating point number of nauticalmiles.
func (d Distance) NauticalMiles() float64 {
	return float64(d / NauticalMile)
}

// Abs returns the absolute value of d as a copy.
func (d Distance) Abs() Distance {
	if d < 0 {
		return -d
	}
	return d
}

// Mul returns the product of d * x as a new Distance.
func (d Distance) Mul(x float64) Distance {
	return d * Distance(x)
}

// Div returns the quotient of d / x as a new Distance.
func (d Distance) Div(x float64) Distance {
	return d / Distance(x)
}

// DivDistance returns the quotient of d / x as a floating point number.
func (d Distance) DivDistance(x Distance) float64 {
	return float64(d / x)
}

// DivDuration returns the quotient of d / t as a Velocity.
func (d Distance) DivDuration(t time.Duration) Velocity {
	return Velocity(float64(d) / float64(t))
}

// DivVelocity returns the quotient of d / x as a time.Duration.
func (d Distance) DivVelocity(x Velocity) time.Duration {
	return time.Duration(float64(d) / float64(x))
}
